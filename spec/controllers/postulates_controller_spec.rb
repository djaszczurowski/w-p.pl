require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe PostulatesController do

  def mock_postulate(stubs={})
    @mock_postulate ||= mock_model(Postulate, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all postulates as @postulates" do
      Postulate.stub(:all) { [mock_postulate] }
      get :index
      assigns(:postulates).should eq([mock_postulate])
    end
  end

  describe "GET show" do
    it "assigns the requested postulate as @postulate" do
      Postulate.stub(:find).with("37") { mock_postulate }
      get :show, :id => "37"
      assigns(:postulate).should be(mock_postulate)
    end
  end

  describe "GET new" do
    it "assigns a new postulate as @postulate" do
      Postulate.stub(:new) { mock_postulate }
      get :new
      assigns(:postulate).should be(mock_postulate)
    end
  end

  describe "GET edit" do
    it "assigns the requested postulate as @postulate" do
      Postulate.stub(:find).with("37") { mock_postulate }
      get :edit, :id => "37"
      assigns(:postulate).should be(mock_postulate)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created postulate as @postulate" do
        Postulate.stub(:new).with({'these' => 'params'}) { mock_postulate(:save => true) }
        post :create, :postulate => {'these' => 'params'}
        assigns(:postulate).should be(mock_postulate)
      end

      it "redirects to the created postulate" do
        Postulate.stub(:new) { mock_postulate(:save => true) }
        post :create, :postulate => {}
        response.should redirect_to(postulate_url(mock_postulate))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved postulate as @postulate" do
        Postulate.stub(:new).with({'these' => 'params'}) { mock_postulate(:save => false) }
        post :create, :postulate => {'these' => 'params'}
        assigns(:postulate).should be(mock_postulate)
      end

      it "re-renders the 'new' template" do
        Postulate.stub(:new) { mock_postulate(:save => false) }
        post :create, :postulate => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested postulate" do
        Postulate.stub(:find).with("37") { mock_postulate }
        mock_postulate.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :postulate => {'these' => 'params'}
      end

      it "assigns the requested postulate as @postulate" do
        Postulate.stub(:find) { mock_postulate(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:postulate).should be(mock_postulate)
      end

      it "redirects to the postulate" do
        Postulate.stub(:find) { mock_postulate(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(postulate_url(mock_postulate))
      end
    end

    describe "with invalid params" do
      it "assigns the postulate as @postulate" do
        Postulate.stub(:find) { mock_postulate(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:postulate).should be(mock_postulate)
      end

      it "re-renders the 'edit' template" do
        Postulate.stub(:find) { mock_postulate(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested postulate" do
      Postulate.stub(:find).with("37") { mock_postulate }
      mock_postulate.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the postulates list" do
      Postulate.stub(:find) { mock_postulate }
      delete :destroy, :id => "1"
      response.should redirect_to(postulates_url)
    end
  end

end
